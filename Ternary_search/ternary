TERNARY SEARCH:
         Ternary search is a divide and conquer algorithm that can be used to find an element in an array.It is similar to binary search where we divide the array into two parts but in this algorithm. 
We divide the given array into three parts and determine which has the key (searched element).

STEPS:
   
    Step 1: Divide the search space (initially, the list) in three parts (with two mid-points: mid1 and mid2)
    Step 2: The target element is compared with the edge elements that is elements at location mid1, mid2 and the end of the search space. If element matches, go to step 3 else predict in which section the target element lies. The search space is reduced to 1/3rd. If the element is not in the list, go to step 4 or to step 1.
    Step 3: Element found. Return index and exit.
    Step 4: Element not found. Exit.


ALGORITHM:
      Begin
   if start <= end then
      midFirst := start + (end - start) /3
      midSecond := midFirst + (end - start) / 3
      if array[midFirst] = key then
         return midFirst
      if array[midSecond] = key then
         return midSecond
      if key < array[midFirst] then
         call ternarySearch(array, start, midFirst-1, key)
      if key > array[midSecond] then
         call ternarySearch(array, midFirst+1, end, key)
      else
         call ternarySearch(array, midFirst+1, midSecond-1, key)
   else
      return invalid location
End

EXAMPLE:

    Array = {1,2,3,4,5,6}
    
    Element to be found = 3
    
    mid = 6/2 = 3
    
    Element found at index 4.
    
